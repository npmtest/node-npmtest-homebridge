{"/home/travis/build/npmtest/node-npmtest-homebridge/test.js":"/* istanbul instrument in package npmtest_homebridge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge/lib.npmtest_homebridge.js":"/* istanbul instrument in package npmtest_homebridge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge.__dirname + '/lib.npmtest_homebridge.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/bin/homebridge":"#!/usr/bin/env node\n\n//\n// This executable sets up the environment and runs the HomeBridge CLI.\n//\n\n'use strict';\n\nprocess.title = 'homebridge';\n\n// Find the HomeBridge lib\nvar path = require('path');\nvar fs = require('fs');\nvar lib = path.join(path.dirname(fs.realpathSync(__filename)), '../lib');\n\n// Run HomeBridge\nrequire(lib + '/cli')();","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/lib/cli.js":"var program = require('commander');\nvar hap = require(\"hap-nodejs\");\nvar version = require('./version');\nvar Server = require('./server').Server;\nvar Plugin = require('./plugin').Plugin;\nvar User = require('./user').User;\nvar log = require(\"./logger\")._system;\n\n'use strict';\n\nmodule.exports = function() {\n\n  var insecureAccess = false;\n\n  program\n    .version(version)\n    .option('-P, --plugin-path [path]', 'look for plugins installed at [path] as well as the default locations ([path] can also point to a single plugin)', function(p) { Plugin.addPluginPath(p); })\n    .option('-U, --user-storage-path [path]', 'look for homebridge user files at [path] instead of the default location (~/.homebridge)', function(p) { User.setStoragePath(p); })\n    .option('-D, --debug', 'turn on debug level logging', function() { require('./logger').setDebugEnabled(true) })\n    .option('-I, --insecure', 'allow unauthenticated requests (for easier hacking)', function() { insecureAccess = true })\n    .parse(process.argv);\n\n  // Initialize HAP-NodeJS with a custom persist directory\n  hap.init(User.persistPath());\n  \n  var server = new Server(insecureAccess);\n\n  var signals = { 'SIGINT': 2, 'SIGTERM': 15 };\n  Object.keys(signals).forEach(function (signal) {\n    process.on(signal, function () {\n      log.info(\"Got %s, shutting down Homebridge...\", signal);\n\n      // Save cached accessories to persist storage.\n      server._updateCachedAccessories();\n\n      process.exit(128 + signals[signal]);\n    });\n  });\n\n  server.run();\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/lib/api.js":"var inherits = require('util').inherits;\nvar EventEmitter = require('events').EventEmitter;\nvar hap = require(\"hap-nodejs\");\nvar hapLegacyTypes = require(\"hap-nodejs/accessories/types.js\");\nvar log = require(\"./logger\")._system;\nvar User = require(\"./user\").User;\nvar PlatformAccessory = require(\"./platformAccessory\").PlatformAccessory;\nvar serverVersion = require(\"./version\");\n\n// The official homebridge API is the object we feed the plugin's exported initializer function.\n\nmodule.exports = {\n  API: API\n}\n\nfunction API() {\n  this._accessories = {}; // this._accessories[pluginName.accessoryName] = accessory constructor\n  this._platforms = {}; // this._platforms[pluginName.platformName] = platform constructor\n\n  this._configurableAccessories = {};\n  this._dynamicPlatforms = {}; // this._dynamicPlatforms[pluginName.platformName] = platform constructor\n  \n  // expose the homebridge API version\n  this.version = 2.2;\n\n  // expose the homebridge server version\n  this.serverVersion = serverVersion;\n\n  // expose the User class methods to plugins to get paths. Example: homebridge.user.storagePath()\n  this.user = User;\n  \n  // expose HAP-NodeJS in its entirely for plugins to use instead of making Plugins\n  // require() it as a dependency - it's a heavy dependency so we don't want it in\n  // every single plugin.\n  this.hap = hap;\n  \n  // we also need to \"bolt on\" the legacy \"types\" constants for older accessories/platforms\n  // still using the \"object literal\" style JSON.\n  this.hapLegacyTypes = hapLegacyTypes;\n\n  this.platformAccessory = PlatformAccessory;\n}\n\ninherits(API, EventEmitter);\n\nAPI.prototype.accessory = function(name) {\n  \n  // if you passed the \"short form\" name like \"Lockitron\" instead of \"homebridge-lockitron.Lockitron\",\n  // see if it matches exactly one accessory.\n  if (name.indexOf('.') == -1) {\n    var found = [];\n    for (var fullName in this._accessories) {\n      if (fullName.split(\".\")[1] == name)\n        found.push(fullName);\n    }\n    \n    if (found.length == 1) {\n      return this._accessories[found[0]];\n    }\n    else if (found.length > 1) {\n      throw new Error(\"The requested accessory '\" + name + \"' has been registered multiple times. Please be more specific by writing one of: \" + found.join(\", \"));\n    }\n    else {\n      throw new Error(\"The requested accessory '\" + name + \"' was not registered by any plugin.\");\n    }\n  }\n  else {\n\n    if (!this._accessories[name])\n      throw new Error(\"The requested accessory '\" + name + \"' was not registered by any plugin.\");\n    \n    return this._accessories[name];\n  }\n}\n\nAPI.prototype.registerAccessory = function(pluginName, accessoryName, constructor, configurationRequestHandler) {\n  var fullName = pluginName + \".\" + accessoryName;\n  \n  if (this._accessories[fullName])\n    throw new Error(\"Attempting to register an accessory '\" + fullName + \"' which has already been registered!\");\n\n  log.info(\"Registering accessory '%s'\", fullName);\n\n  this._accessories[fullName] = constructor;\n\n  // The plugin supports configuration\n  if (configurationRequestHandler) {\n    this._configurableAccessories[fullName] = configurationRequestHandler;\n  }\n}\n\nAPI.prototype.publishCameraAccessories = function(pluginName, accessories) {\n  for (var index in accessories) {\n    var accessory = accessories[index];\n    if (!(accessory instanceof PlatformAccessory)) {\n      throw new Error(pluginName + \" attempt to register an accessory that isn\\'t PlatformAccessory!\");\n    }\n    accessory._associatedPlugin = pluginName;\n  }\n\n  this.emit('publishCameraAccessories', accessories);\n}\n\nAPI.prototype.platform = function(name) {\n  \n  // if you passed the \"short form\" name like \"Lockitron\" instead of \"homebridge-lockitron.Lockitron\",\n  // see if it matches exactly one platform.\n  if (name.indexOf('.') == -1) {\n    var found = [];\n    for (var fullName in this._platforms) {\n      if (fullName.split(\".\")[1] == name)\n        found.push(fullName);\n    }\n    \n    if (found.length == 1) {\n      return this._platforms[found[0]];\n    }\n    else if (found.length > 1) {\n      throw new Error(\"The requested platform '\" + name + \"' has been registered multiple times. Please be more specific by writing one of: \" + found.join(\", \"));\n    }\n    else {\n      throw new Error(\"The requested platform '\" + name + \"' was not registered by any plugin.\");\n    }\n  }\n  else {\n\n    if (!this._platforms[name])\n      throw new Error(\"The requested platform '\" + name + \"' was not registered by any plugin.\");\n    \n    return this._platforms[name];\n  }\n}\n\nAPI.prototype.registerPlatform = function(pluginName, platformName, constructor, dynamic) {\n  var fullName = pluginName + \".\" + platformName;\n  \n  if (this._platforms[fullName])\n    throw new Error(\"Attempting to register a platform '\" + fullName + \"' which has already been registered!\");\n\n  log.info(\"Registering platform '%s'\", fullName);\n\n  this._platforms[fullName] = constructor;\n\n  if (dynamic) {\n    this._dynamicPlatforms[fullName] = constructor;\n  }\n}\n\nAPI.prototype.registerPlatformAccessories = function(pluginName, platformName, accessories) {\n  for (var index in accessories) {\n    var accessory = accessories[index];\n    if (!(accessory instanceof PlatformAccessory)) {\n      throw new Error(pluginName + \" - \" + platformName + \" attempt to register an accessory that isn\\'t PlatformAccessory!\");\n    }\n    accessory._associatedPlugin = pluginName;\n    accessory._associatedPlatform = platformName;\n  }\n\n  this.emit('registerPlatformAccessories', accessories);\n}\n\nAPI.prototype.updatePlatformAccessories = function(accessories) {\n  this.emit('updatePlatformAccessories', accessories);\n}\n\nAPI.prototype.unregisterPlatformAccessories = function(pluginName, platformName, accessories) {\n  for (var index in accessories) {\n    var accessory = accessories[index];\n    if (!(accessory instanceof PlatformAccessory)) {\n      throw new Error(pluginName + \" - \" + platformName + \" attempt to unregister an accessory that isn\\'t PlatformAccessory!\");\n    }\n  }\n  this.emit('unregisterPlatformAccessories', accessories);\n}","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/lib/bridgeSetupManager.js":"var inherits = require('util').inherits;\nvar EventEmitter = require('events').EventEmitter;\nvar Service = require(\"hap-nodejs\").Service;\nvar Characteristic = require(\"hap-nodejs\").Characteristic;\nvar SetupSession = require(\"./bridgeSetupSession\").SetupSession;\n\n'use strict';\n\nmodule.exports = {\n  BridgeSetupManager: BridgeSetupManager\n}\n\nfunction BridgeSetupManager() {\n  this.session;\n\n  this.service = new Service(null, \"49FB9D4D-0FEA-4BF1-8FA6-E7B18AB86DCE\");\n\n  this.stateCharacteristic = new Characteristic(\"State\", \"77474A2F-FA98-485E-97BE-4762458774D8\", {\n    format: Characteristic.Formats.UINT8,\n    minValue: 0,\n    maxValue: 1,\n    minStep: 1,\n    perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n  });\n  this.stateCharacteristic.value = 0;\n  this.service.addCharacteristic(this.stateCharacteristic);\n\n  this.versionCharacteristic = new Characteristic(\"Version\", \"FD9FE4CC-D06F-4FFE-96C6-595D464E1026\", {\n    format: Characteristic.Formats.STRING,\n    perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n  });\n  this.versionCharacteristic.value = \"1.0\";\n  this.service.addCharacteristic(this.versionCharacteristic);\n\n  this.controlPointCharacteristic = new Characteristic(\"Control Point\", \"5819A4C2-E1B0-4C9D-B761-3EB1AFF43073\", {\n    format: Characteristic.Formats.DATA,\n    perms: [Characteristic.Perms.READ, Characteristic.Perms.WRITE, Characteristic.Perms.NOTIFY]\n  })\n  this.controlPointCharacteristic.on('get', function(callback, context) {\n    this.handleReadRequest(callback, context);\n  }.bind(this));\n  this.controlPointCharacteristic.on('set', function(newValue, callback, context) {\n    this.handleWriteRequest(newValue, callback, context);\n  }.bind(this));\n\n  this.controlPointCharacteristic.value = null;\n  this.service.addCharacteristic(this.controlPointCharacteristic);\n}\n\ninherits(BridgeSetupManager, EventEmitter);\n\nBridgeSetupManager.prototype.handleReadRequest = function(callback, context) {\n  if (!context) {\n    return;\n  }\n\n  if (!this.session) {\n    callback(null, null);\n  } else {\n    this.session.handleReadRequest(callback);\n  }\n}\n\nBridgeSetupManager.prototype.handleWriteRequest = function(value, callback, context) {\n  if (!context) {\n    callback();\n    return;\n  }\n\n  var data = new Buffer(value, 'base64');\n  var request = JSON.parse(data.toString());\n  callback();\n\n  if (!this.session || this.session.sessionUUID !== request.sid) {\n    if (this.session) {\n      this.session.removeAllListeners();\n      this.session.validSession = false;\n    }\n\n    this.session = new SetupSession(this.stateCharacteristic, this.controlPointCharacteristic);\n    this.session.configurablePlatformPlugins = this.configurablePlatformPlugins;\n    this.session.on('newConfig', function(type, name, replace, config) {\n      this.emit('newConfig', type, name, replace, config);\n    }.bind(this));\n\n    this.session.on('requestCurrentConfig', function(callback) {\n      this.emit('requestCurrentConfig', callback);\n    }.bind(this));\n\n    this.session.on('end', function() {\n      this.session = null;\n    }.bind(this));\n  }\n\n  this.session.handleWriteRequest(request);\n}","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/lib/bridgeSetupSession.js":"var crypto = require('crypto');\nvar uuid = require(\"hap-nodejs\").uuid;\nvar inherits = require('util').inherits;\nvar EventEmitter = require('events').EventEmitter;\n\n'use strict';\n\nmodule.exports = {\n  SetupSession: BridgeSetupSession\n}\n\nfunction BridgeSetupSession(stateChar, controlChar) {\n  this.validSession = false\n  this.sessionUUID = uuid.generate(crypto.randomBytes(32));\n  this.stateChar = stateChar;\n  this.controlChar = controlChar;\n\n  this.transactionID = 0;\n  this.preferedLanguage = \"en-US\";\n\n  this.lastResponse = null;\n\n  // 0 - Waiting for negotiate\n  // 1 - Waiting for selection\n  // 2 - List platforms, waiting selection to give session to plugin\n  // 3 - Forward message to platform\n  // 4 - Manage accessory config, waiting selection\n  this.currentStage = 0;\n\n  this.currentPluginName;\n  this.currentPlatformInstance;\n  this.currentPlatformContext = {};\n}\n\ninherits(BridgeSetupSession, EventEmitter);\n\nBridgeSetupSession.prototype.handleWriteRequest = function(request) {\n  if (request.type === \"Negotiate\") {\n    this.transactionID = request.tid + 1;\n    this.preferedLanguage = request.language;\n    this.validSession = true\n\n    var respDict = {\n      \"tid\": this.transactionID,\n      \"type\": \"Negotiate\",\n      \"sid\": this.sessionUUID,\n      \"attachment\": {\n        \"type\": \"Interface\",\n        \"interface\": \"list\",\n        \"title\": \"How can I help you?\",\n        \"items\": [\n          \"Manage Platform\",\n          \"Manage Accessories\"\n        ]\n      }\n    }\n\n    this.currentStage = 1;\n\n    this.sendResponse(respDict);\n  } else if (request.type === \"Interface\") {\n    this.transactionID = request.tid;\n\n    if (this.currentStage === 1) {\n      if (request.response.selections[0] === 0) {\n        this.presentManagePlatformMenu();\n      } else if (request.response.selections[0] === 1) {\n        this.presentManageAccessoryMenu();\n      }\n    } else if (this.currentStage === 2) {\n      var selectedIndex = request.response.selections[0];\n      var targetPlatformName = this.listOfPlatforms[selectedIndex];\n      var targetPlatform = this.configurablePlatformPlugins[targetPlatformName];\n\n      this.currentPlatformContext = {};\n      this.currentPlatformContext.preferedLanguage = this.preferedLanguage;\n      this.currentPluginName = targetPlatformName;\n      this.currentPlatformInstance = targetPlatform;\n      this.currentStage = 3;\n      this.currentPlatformInstance.configurationRequestHandler(this.currentPlatformContext, null, this.pluginResponseHandler.bind(this));\n    } else if (this.currentStage === 3) {\n      this.currentPlatformInstance.configurationRequestHandler(this.currentPlatformContext, request, this.pluginResponseHandler.bind(this));\n    } else if (this.currentStage === 4) {\n      this.handleManageAccessory(request);\n    }\n  } else if (request.type === \"Terminate\") {\n    this.transactionID = request.tid;\n    this.validSession = false;\n\n    if (this.currentStage === 3) {\n      this.currentPlatformInstance.configurationRequestHandler(this.currentPlatformContext, request, this.pluginResponseHandler.bind(this));\n    }\n  }\n}\n\nBridgeSetupSession.prototype.pluginResponseHandler = function(response, type, replace, config) {\n  if (config) {\n    this.emit('newConfig', type, this.currentPluginName, replace, config);\n    this.presentMainMenu();\n  } else if (response) {\n    this.transactionID += 1;\n    response.tid = this.transactionID;\n    response.sid = this.sessionUUID;\n\n    this.sendResponse(response);\n  }\n}\n\nBridgeSetupSession.prototype.presentMainMenu = function() {\n  this.currentStage = 1;\n\n  this.transactionID += 1;\n\n  var respDict = {\n    \"tid\": this.transactionID,\n    \"sid\": this.sessionUUID,\n    \"type\": \"Interface\",\n    \"interface\": \"list\",\n    \"title\": \"How can I help you?\",\n    \"items\": [\n      \"Manage Platform\",\n      \"Manage Accessories\"\n    ]\n  }\n\n  this.sendResponse(respDict);\n}\n\nBridgeSetupSession.prototype.presentManagePlatformMenu = function() {\n  var listOfPlatforms = [];\n  for (var name in this.configurablePlatformPlugins) {\n    listOfPlatforms.push(name);\n  }\n  this.listOfPlatforms = listOfPlatforms;\n\n  this.transactionID += 1;\n\n  var respDict = {\n    \"tid\": this.transactionID,\n    \"type\": \"Interface\",\n    \"sid\": this.sessionUUID,\n    \"interface\": \"list\",\n    \"title\": \"Which platform?\",\n    \"items\": listOfPlatforms\n  }\n\n  this.currentStage = 2;\n\n  this.sendResponse(respDict);\n}\n\nBridgeSetupSession.prototype.presentManageAccessoryMenu = function() {\n  this.emit('requestCurrentConfig', function(config) {\n    this.currentConfig = config;\n  }.bind(this));\n\n  this.transactionID += 1;\n\n  var respDict = {\n    \"tid\": this.transactionID,\n    \"type\": \"Interface\",\n    \"sid\": this.sessionUUID,\n    \"interface\": \"instruction\",\n    \"title\": \"Not Implemented\",\n    \"detail\": \"This function is not yet implemented.\\nPlease manually edit config.json for now.\",\n    \"showNextButton\": true,\n    \"heroImage\": \"\"\n  }\n\n  this.currentStage = 4;\n  this.sendResponse(respDict);\n}\n\nBridgeSetupSession.prototype.handleManageAccessory = function(request) {\n  this.presentMainMenu();\n}\n\nBridgeSetupSession.prototype.sendResponse = function(response) {\n  if (this.validSession) {\n    var serializedReponse = JSON.stringify(response);\n    var respData = new Buffer(serializedReponse).toString('base64');\n    this.lastResponse = respData;\n    setTimeout(function() {\n      this.controlChar.setValue(respData);\n    }.bind(this), 100);\n  }\n}\n\nBridgeSetupSession.prototype.handleReadRequest = function(callback) {\n  callback(null, this.lastResponse);\n}","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/lib/logger.js":"var chalk = require('chalk');\nvar util = require('util');\n\n'use strict';\n\nmodule.exports = {\n  Logger: Logger,\n  setDebugEnabled: setDebugEnabled,\n  _system: new Logger() // system logger, for internal use only\n}\n\nvar DEBUG_ENABLED = false;\n\n// Turns on debug level logging\nfunction setDebugEnabled(enabled) {\n  DEBUG_ENABLED = enabled;\n}\n\n// global cache of logger instances by plugin name\nvar loggerCache = {};\n\n/**\n * Logger class\n */\n\nfunction Logger(prefix) {\n  this.prefix = prefix;\n}\n\nLogger.prototype.debug = function(msg) {\n  if (DEBUG_ENABLED)\n    this.log.apply(this, ['debug'].concat(Array.prototype.slice.call(arguments)));\n}\n\nLogger.prototype.info = function(msg) {\n  this.log.apply(this, ['info'].concat(Array.prototype.slice.call(arguments)));\n}\n\nLogger.prototype.warn = function(msg) {\n  this.log.apply(this, ['warn'].concat(Array.prototype.slice.call(arguments)));\n}\n\nLogger.prototype.error = function(msg) {\n  this.log.apply(this, ['error'].concat(Array.prototype.slice.call(arguments)));\n}\n\nLogger.prototype.log = function(level, msg) {\n\n  msg = util.format.apply(util, Array.prototype.slice.call(arguments, 1));\n  func = console.log;\n\n  if (level == 'debug') {\n    msg = chalk.gray(msg);\n  }\n  else if (level == 'warn') {\n    msg = chalk.yellow(msg);\n    func = console.error;\n  }\n  else if (level == 'error') {\n    msg = chalk.bold.red(msg);\n    func = console.error;\n  }\n\n  // prepend prefix if applicable\n  if (this.prefix)\n    msg = chalk.cyan(\"[\" + this.prefix +  \"]\") + \" \" + msg;\n\n  // prepend timestamp\n  var date = new Date();\n  msg =  chalk.white(\"[\" + date.toLocaleString() + \"]\") + \" \" + msg;\n\n  func(msg);\n}\n\nLogger.withPrefix = function(prefix) {\n\n  if (!loggerCache[prefix]) {\n    // create a class-like logger thing that acts as a function as well\n    // as an instance of Logger.\n    var logger = new Logger(prefix);\n    var log = logger.info.bind(logger);\n    log.debug = logger.debug;\n    log.info = logger.info;\n    log.warn = logger.warn;\n    log.error = logger.error;\n    log.log = logger.log;\n    log.prefix = logger.prefix;\n    loggerCache[prefix] = log;\n  }\n\n  return loggerCache[prefix];\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/lib/platformAccessory.js":"var uuid = require(\"hap-nodejs\").uuid;\nvar Accessory = require(\"hap-nodejs\").Accessory;\nvar Service = require(\"hap-nodejs\").Service;\nvar Characteristic = require(\"hap-nodejs\").Characteristic;\nvar inherits = require('util').inherits;\nvar EventEmitter = require('events').EventEmitter;\n\n'use strict';\n\nmodule.exports = {\n  PlatformAccessory: PlatformAccessory\n}\n\nfunction PlatformAccessory(displayName, UUID, category) {\n  if (!displayName) throw new Error(\"Accessories must be created with a non-empty displayName.\");\n  if (!UUID) throw new Error(\"Accessories must be created with a valid UUID.\");\n  if (!uuid.isValid(UUID)) throw new Error(\"UUID '\" + UUID + \"' is not a valid UUID. Try using the provided 'generateUUID' function to create a valid UUID from any arbitrary string, like a serial number.\");\n\n  this.displayName = displayName;\n  this.UUID = UUID;\n  this.category = category || Accessory.Categories.OTHER;\n  this.services = [];\n  this.reachable = false;\n  this.context = {};\n\n  this._associatedPlugin;\n  this._associatedPlatform;\n  this._associatedHAPAccessory;\n\n  this\n    .addService(Service.AccessoryInformation)\n    .setCharacteristic(Characteristic.Name, displayName)\n    .setCharacteristic(Characteristic.Manufacturer, \"Default-Manufacturer\")\n    .setCharacteristic(Characteristic.Model, \"Default-Model\")\n    .setCharacteristic(Characteristic.SerialNumber, \"Default-SerialNumber\");\n}\n\ninherits(PlatformAccessory, EventEmitter);\n\nPlatformAccessory.prototype.addService = function(service) {\n  // service might be a constructor like `Service.AccessoryInformation` instead of an instance\n  // of Service. Coerce if necessary.\n  if (typeof service === 'function')\n    service = new (Function.prototype.bind.apply(service, arguments));\n  \n  // check for UUID+subtype conflict\n  for (var index in this.services) {\n    var existing = this.services[index];\n    if (existing.UUID === service.UUID) {\n      // OK we have two Services with the same UUID. Check that each defines a `subtype` property and that each is unique.\n      if (!service.subtype)\n        throw new Error(\"Cannot add a Service with the same UUID '\" + existing.UUID + \"' as another Service in this Accessory without also defining a unique 'subtype' property.\");\n      \n      if (service.subtype.toString() === existing.subtype.toString())\n        throw new Error(\"Cannot add a Service with the same UUID '\" + existing.UUID + \"' and subtype '\" + existing.subtype + \"' as another Service in this Accessory.\");\n    }\n  }\n\n  this.services.push(service);\n\n  if (this._associatedHAPAccessory) {\n    this._associatedHAPAccessory.addService(service);\n  }\n  return service;\n}\n\nPlatformAccessory.prototype.removeService = function(service) {\n  var targetServiceIndex;\n\n  for (var index in this.services) {\n    var existingService = this.services[index];\n    \n    if (existingService === service) {\n      targetServiceIndex = index;\n      break;\n    }\n  }\n\n  if (targetServiceIndex) {\n    this.services.splice(targetServiceIndex, 1);\n    service.removeAllListeners();\n\n    if (this._associatedHAPAccessory) {\n      this._associatedHAPAccessory.removeService(service);\n    }\n  }\n}\n\n/**\n * searchs for a Service in the services collection and returns the first Service object that matches.\n * If multiple services of the same type are present in one accessory, use getServiceByUUIDAndSubType instead.\n * @param {ServiceConstructor|string} name\n * @returns Service\n */\nPlatformAccessory.prototype.getService = function(name) {\n  for (var index in this.services) {\n    var service = this.services[index];\n    \n    if (typeof name === 'string' && (service.displayName === name || service.name === name))\n      return service;\n    else if (typeof name === 'function' && ((service instanceof name) || (name.UUID === service.UUID)))\n      return service;\n  }\n}\n\n/**\n * searchs for a Service in the services collection and returns the first Service object that matches.\n * If multiple services of the same type are present in one accessory, use getServiceByUUIDAndSubType instead.\n * @param {string} UUID Can be an UUID, a service.displayName, or a constructor of a Service\n * @param {string} subtype A subtype string to match\n * @returns Service\n */\nPlatformAccessory.prototype.getServiceByUUIDAndSubType = function(UUID, subtype) {\n  for (var index in this.services) {\n    var service = this.services[index];\n    \n    if (typeof UUID === 'string' && (service.displayName === UUID || service.name === UUID) && service.subtype === subtype )\n      return service;\n    else if (typeof UUID === 'function' && ((service instanceof UUID) || (UUID.UUID === service.UUID)) && service.subtype === subtype)\n      return service;\n  }\n}\n\n\nPlatformAccessory.prototype.updateReachability = function(reachable) {\n  this.reachable = reachable;\n\n  if (this._associatedHAPAccessory) {\n    this._associatedHAPAccessory.updateReachability(reachable);\n  }\n}\n\nPlatformAccessory.prototype.configureCameraSource = function(cameraSource) {\n  this.cameraSource = cameraSource;\n  for (var index in cameraSource.services) {\n    var service = cameraSource.services[index];\n    this.addService(service);\n  }\n}\n\nPlatformAccessory.prototype._prepareAssociatedHAPAccessory = function () {\n  this._associatedHAPAccessory = new Accessory(this.displayName, this.UUID);\n\n  if (this.cameraSource) {\n    this._associatedHAPAccessory.configureCameraSource(this.cameraSource);\n  }\n\n  this._associatedHAPAccessory._sideloadServices(this.services);\n  this._associatedHAPAccessory.category = this.category;\n  this._associatedHAPAccessory.reachable = this.reachable;\n  this._associatedHAPAccessory.on('identify', function(paired, callback) {\n    if (this.listeners('identify').length > 0) {\n    // allow implementors to identify this Accessory in whatever way is appropriate, and pass along\n    // the standard callback for completion.\n      this.emit('identify', paired, callback);\n    } else {\n      callback();\n    }\n  }.bind(this));\n}\n\nPlatformAccessory.prototype._dictionaryPresentation = function() {\n  var accessory = {};\n\n  accessory.plugin = this._associatedPlugin;\n  accessory.platform = this._associatedPlatform;\n  accessory.displayName = this.displayName;\n  accessory.UUID = this.UUID;\n  accessory.category = this.category;\n  accessory.context = this.context;\n\n  var services = [];\n  for (var index in this.services) {\n    var service = this.services[index];\n    var servicePresentation = {};\n    servicePresentation.displayName = service.displayName;\n    servicePresentation.UUID = service.UUID;\n    servicePresentation.subtype = service.subtype;\n\n    var characteristics = [];\n    for (var cIndex in service.characteristics) {\n      var characteristic = service.characteristics[cIndex];\n      var characteristicPresentation = {};\n      characteristicPresentation.displayName = characteristic.displayName;\n      characteristicPresentation.UUID = characteristic.UUID;\n      characteristicPresentation.props = characteristic.props;\n      characteristicPresentation.value = characteristic.value;\n      characteristicPresentation.eventOnlyCharacteristic = characteristic.eventOnlyCharacteristic;\n      characteristics.push(characteristicPresentation);\n    }\n    \n    servicePresentation.characteristics = characteristics;\n    services.push(servicePresentation);\n  }\n\n  accessory.services = services;\n  return accessory;\n}\n\nPlatformAccessory.prototype._configFromData = function(data) {\n  this._associatedPlugin = data.plugin;\n  this._associatedPlatform = data.platform;\n  this.displayName = data.displayName;\n  this.UUID = data.UUID;\n  this.category = data.category;\n  this.context = data.context;\n  this.reachable = false;\n\n  var services = [];\n  for (var index in data.services) {\n    var service = data.services[index];\n    var hapService = new Service(service.displayName, service.UUID, service.subtype);\n\n    var characteristics = [];\n    for (var cIndex in service.characteristics) {\n      var characteristic = service.characteristics[cIndex];\n      var hapCharacteristic = new Characteristic(characteristic.displayName, characteristic.UUID, characteristic.props);\n      hapCharacteristic.eventOnlyCharacteristic = characteristic.eventOnlyCharacteristic;\n      hapCharacteristic.value = characteristic.value;\n      characteristics.push(hapCharacteristic);\n    }\n\n    hapService._sideloadCharacteristics(characteristics);\n    services.push(hapService);\n  }\n\n  this.services = services;\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/lib/plugin.js":"var path = require('path');\nvar fs = require('fs');\nvar semver = require('semver');\nvar User = require('./user').User;\nvar version = require('./version');\nvar log = require(\"./logger\")._system;\n\n'use strict';\n\nmodule.exports = {\n  Plugin: Plugin\n}\n\n/**\n * Homebridge Plugin.\n *\n * Allows for discovering and loading installed Homebridge plugins.\n */\n\nfunction Plugin(pluginPath) {\n  this.pluginPath = pluginPath; // like \"/usr/local/lib/node_modules/homebridge-lockitron\"\n  this.initializer; // exported function from the plugin that initializes it\n}\n\nPlugin.prototype.name = function() {\n  return path.basename(this.pluginPath);\n}\n\nPlugin.prototype.load = function(options) {\n  options = options || {};\n\n  // does this plugin exist at all?\n  if (!fs.existsSync(this.pluginPath)) {\n    throw new Error(\"Plugin \" + this.pluginPath + \" was not found. Make sure the module '\" + this.pluginPath + \"' is installed.\");\n  }\n\n  // attempt to load package.json\n  var pjson = Plugin.loadPackageJSON(this.pluginPath);\n\n  // very temporary fix for first wave of plugins\n  if (pjson.peerDepdendencies && (!pjson.engines || !pjson.engines.homebridge)) {\n    var engines = pjson.engines || {}\n    engines.homebridge = pjson.peerDepdendencies.homebridge;\n    pjson.engines = engines;\n  }\n\n  // pluck out the HomeBridge version requirement\n  if (!pjson.engines || !pjson.engines.homebridge) {\n    throw new Error(\"Plugin \" + this.pluginPath + \" does not contain the 'homebridge' package in 'engines'.\");\n  }\n\n  var versionRequired = pjson.engines.homebridge;\n\n  // make sure the version is satisfied by the currently running version of HomeBridge\n  if (!semver.satisfies(version, versionRequired)) {\n    throw new Error(\"Plugin \" + this.pluginPath + \" requires a HomeBridge version of \" + versionRequired + \" which does not satisfy the current HomeBridge version of \" + version + \". You may need to upgrade your installation of HomeBridge.\");\n  }\n\n  // figure out the main module - index.js unless otherwise specified\n  var main = pjson.main || \"./index.js\";\n\n  var mainPath = path.join(this.pluginPath, main);\n\n  // try to require() it and grab the exported initialization hook\n  this.initializer = require(mainPath);\n}\n\nPlugin.loadPackageJSON = function(pluginPath) {\n  // check for a package.json\n  var pjsonPath = path.join(pluginPath, \"package.json\");\n  var pjson = null;\n\n  if (!fs.existsSync(pjsonPath)) {\n    throw new Error(\"Plugin \" + pluginPath + \" does not contain a package.json.\");\n  }\n\n  try {\n    // attempt to parse package.json\n    pjson = JSON.parse(fs.readFileSync(pjsonPath));\n  }\n  catch (err) {\n    throw new Error(\"Plugin \" + pluginPath + \" contains an invalid package.json. Error: \" + err);\n  }\n\n  // make sure the name is prefixed with 'homebridge-'\n  if (!pjson.name || pjson.name.indexOf('homebridge-') != 0) {\n    throw new Error(\"Plugin \" + pluginPath + \" does not have a package name that begins with 'homebridge-'.\");\n  }\n\n  // verify that it's tagged with the correct keyword\n  if (!pjson.keywords || pjson.keywords.indexOf(\"homebridge-plugin\") == -1) {\n    throw new Error(\"Plugin \" + pluginPath + \" package.json does not contain the keyword 'homebridge-plugin'.\");\n  }\n\n  return pjson;\n}\n\nPlugin.getDefaultPaths = function() {\n  var win32 = process.platform === 'win32';\n  var paths = [];\n\n  // add the paths used by require()\n  paths = paths.concat(require.main.paths);\n\n  // THIS SECTION FROM: https://github.com/yeoman/environment/blob/master/lib/resolver.js\n\n  // Adding global npm directories\n  // We tried using npm to get the global modules path, but it haven't work out\n  // because of bugs in the parseable implementation of `ls` command and mostly\n  // performance issues. So, we go with our best bet for now.\n  if (process.env.NODE_PATH) {\n    paths = process.env.NODE_PATH.split(path.delimiter)\n      .filter(function(p) { return !!p; }) // trim out empty values\n      .concat(paths);\n  } else {\n    // Default paths for each system\n    if (win32) {\n      paths.push(path.join(process.env.APPDATA, 'npm/node_modules'));\n    } else {\n      paths.push('/usr/local/lib/node_modules');\n      paths.push('/usr/lib/node_modules');\n      const exec = require('child_process').execSync;\n      paths.push(exec('/bin/echo -n \"$(npm -g prefix)/lib/node_modules\"').toString('utf8'));\n    }\n  }\n  return paths;\n}\n\n// All search paths we will use to discover installed plugins\nPlugin.paths = Plugin.getDefaultPaths();\n\nPlugin.addPluginPath = function(pluginPath) {\n  Plugin.paths.unshift(path.resolve(process.cwd(), pluginPath));\n}\n\n// Gets all plugins installed on the local system\nPlugin.installed = function() {\n\n  var plugins = [];\n  var pluginsByName = {}; // don't add duplicate plugins\n  var searchedPaths = {}; // don't search the same paths twice\n\n  // search for plugins among all known paths, in order\n  for (var index in Plugin.paths) {\n    var requirePath = Plugin.paths[index];\n\n    // did we already search this path?\n    if (searchedPaths[requirePath])\n      continue;\n\n    searchedPaths[requirePath] = true;\n\n    // just because this path is in require.main.paths doesn't mean it necessarily exists!\n    if (!fs.existsSync(requirePath))\n      continue;\n\n    var names = fs.readdirSync(requirePath);\n\n    // does this path point inside a single plugin and not a directory containing plugins?\n    if (fs.existsSync(path.join(requirePath, \"package.json\")))\n      names = [\"\"];\n\n    // read through each directory in this node_modules folder\n    for (var index2 in names) {\n      var name = names[index2];\n\n      // reconstruct full path\n      var pluginPath = path.join(requirePath, name);\n      try {\n        // we only care about directories\n        if (!fs.statSync(pluginPath).isDirectory()) continue;\n      } catch (e) {\n        continue;\n      }\n      // does this module contain a package.json?\n      var pjson;\n      try {\n        // throws an Error if this isn't a homebridge plugin\n        pjson = Plugin.loadPackageJSON(pluginPath);\n      }\n      catch (err) {\n        // is this \"trying\" to be a homebridge plugin? if so let you know what went wrong.\n        if (!name || name.indexOf('homebridge-') == 0) {\n          log.warn(err.message);\n        }\n\n        // skip this module\n        continue;\n      }\n\n      // get actual name if this path points inside a single plugin\n      if (!name) name = pjson.name;\n\n      // add it to the return list\n      if (!pluginsByName[name]) {\n        pluginsByName[name] = pluginPath;\n        plugins.push(new Plugin(pluginPath));\n      }\n      else {\n        log.warn(\"Warning: skipping plugin found at '\" + pluginPath + \"' since we already loaded the same plugin from '\" + pluginsByName[name] + \"'.\");\n      }\n    }\n  }\n\n  return plugins;\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/lib/user.js":"var path = require('path');\nvar fs = require('fs');\n\n'use strict';\n\nmodule.exports = {\n  User: User\n}\n\n/**\n * Manages user settings and storage locations.\n */\n\n// global cached config\nvar config;\n\n// optional custom storage path\nvar customStoragePath;\n\nfunction User() {\n}\n  \nUser.config = function() {\n  return config || (config = Config.load(User.configPath()));\n}\n  \nUser.storagePath = function() {\n  if (customStoragePath) return customStoragePath;\n  var home = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n  return path.join(home, \".homebridge\");\n}\n\nUser.configPath = function() {\n  return path.join(User.storagePath(), \"config.json\");\n}\n\nUser.persistPath = function() {\n  return path.join(User.storagePath(), \"persist\");\n}\n\nUser.cachedAccessoryPath = function() {\n  return path.join(User.storagePath(), \"accessories\");\n}\n\nUser.setStoragePath = function(path) {\n  customStoragePath = path;\n}","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/lib/version.js":"var fs = require('fs');\nvar path = require('path');\n\n'use strict';\n\nmodule.exports = getVersion();\n\nfunction getVersion() {\n  var packageJSONPath = path.join(__dirname, '../package.json');\n  var packageJSON = JSON.parse(fs.readFileSync(packageJSONPath));\n  return packageJSON.version;\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/lib/server.js":"var path = require('path');\nvar fs = require('fs');\nvar uuid = require(\"hap-nodejs\").uuid;\nvar accessoryStorage = require('node-persist').create();\nvar Bridge = require(\"hap-nodejs\").Bridge;\nvar Accessory = require(\"hap-nodejs\").Accessory;\nvar Service = require(\"hap-nodejs\").Service;\nvar Characteristic = require(\"hap-nodejs\").Characteristic;\nvar AccessoryLoader = require(\"hap-nodejs\").AccessoryLoader;\nvar once = require(\"hap-nodejs/lib/util/once\").once;\nvar Plugin = require('./plugin').Plugin;\nvar User = require('./user').User;\nvar API = require('./api').API;\nvar PlatformAccessory = require(\"./platformAccessory\").PlatformAccessory;\nvar BridgeSetupManager = require(\"./bridgeSetupManager\").BridgeSetupManager;\nvar log = require(\"./logger\")._system;\nvar Logger = require('./logger').Logger;\nvar mac = require(\"./util/mac\");\nvar chalk = require('chalk');\n\n'use strict';\n\nmodule.exports = {\n  Server: Server\n}\n\nfunction Server(insecureAccess, opts) {\n  opts = opts || {};\n\n  // Setup Accessory Cache Storage\n  accessoryStorage.initSync({ dir: User.cachedAccessoryPath() });\n\n  this._api = new API(); // object we feed to Plugins\n\n  this._api.on('registerPlatformAccessories', function(accessories) {\n    this._handleRegisterPlatformAccessories(accessories);\n  }.bind(this));\n\n  this._api.on('updatePlatformAccessories', function(accessories) {\n    this._handleUpdatePlatformAccessories(accessories);\n  }.bind(this));\n\n  this._api.on('unregisterPlatformAccessories', function(accessories) {\n    this._handleUnregisterPlatformAccessories(accessories);\n  }.bind(this));\n\n  this._api.on('publishCameraAccessories', function(accessories) {\n    this._handlePublishCameraAccessories(accessories);\n  }.bind(this));\n\n  this._plugins = this._loadPlugins(); // plugins[name] = Plugin instance\n  this._config = opts.config || this._loadConfig();\n  this._cachedPlatformAccessories = this._loadCachedPlatformAccessories();\n  this._bridge = this._createBridge();\n\n  this._activeDynamicPlugins = {};\n  this._configurablePlatformPlugins = {};\n  this._publishedCameras = {};\n  this._setupManager = new BridgeSetupManager();\n  this._setupManager.on('newConfig', this._handleNewConfig.bind(this));\n\n  this._setupManager.on('requestCurrentConfig', function(callback) {\n    callback(this._config);\n  }.bind(this));\n\n  // Server is \"secure by default\", meaning it creates a top-level Bridge accessory that\n  // will not allow unauthenticated requests. This matches the behavior of actual HomeKit\n  // accessories. However you can set this to true to allow all requests without authentication,\n  // which can be useful for easy hacking. Note that this will expose all functions of your\n  // bridged accessories, like changing charactersitics (i.e. flipping your lights on and off).\n  this._allowInsecureAccess = insecureAccess || false;\n}\n\nServer.prototype.run = function() {\n\n  // keep track of async calls we're waiting for callbacks on before we can start up\n  this._asyncCalls = 0;\n  this._asyncWait = true;\n\n  if (this._config.platforms) this._loadPlatforms();\n  if (this._config.accessories) this._loadAccessories();\n  this._loadDynamicPlatforms();\n  this._configCachedPlatformAccessories();\n  this._setupManager.configurablePlatformPlugins = this._configurablePlatformPlugins;\n  this._bridge.addService(this._setupManager.service);\n\n  this._asyncWait = false;\n\n  // publish now unless we're waiting on anyone\n  if (this._asyncCalls == 0)\n    this._publish();\n\n  this._api.emit('didFinishLaunching');\n}\n\nServer.prototype._publish = function() {\n  // pull out our custom Bridge settings from config.json, if any\n  var bridgeConfig = this._config.bridge || {};\n\n  var info = this._bridge.getService(Service.AccessoryInformation);\n  if (bridgeConfig.manufacturer)\n    info.setCharacteristic(Characteristic.Manufacturer, bridgeConfig.manufacturer);\n  if (bridgeConfig.model)\n    info.setCharacteristic(Characteristic.Model, bridgeConfig.model);\n  if (bridgeConfig.serialNumber)\n    info.setCharacteristic(Characteristic.SerialNumber, bridgeConfig.serialNumber);\n\n  this._printPin(bridgeConfig.pin);\n\n  this._bridge.on('listening', function(port) {\n    log.info(\"Homebridge is running on port %s.\", port);\n  });\n\n  this._bridge.publish({\n    username: bridgeConfig.username || \"CC:22:3D:E3:CE:30\",\n    port: bridgeConfig.port || 0,\n    pincode: bridgeConfig.pin || \"031-45-154\",\n    category: Accessory.Categories.BRIDGE\n  }, this._allowInsecureAccess);\n}\n\nServer.prototype._loadPlugins = function(accessories, platforms) {\n\n  var plugins = {};\n  var foundOnePlugin = false;\n\n  // load and validate plugins - check for valid package.json, etc.\n  Plugin.installed().forEach(function(plugin) {\n\n    // attempt to load it\n    try {\n      plugin.load();\n    }\n    catch (err) {\n      log.error(\"====================\")\n      log.error(\"ERROR LOADING PLUGIN \" + plugin.name() + \":\")\n      log.error(err.stack);\n      log.error(\"====================\")\n      plugin.loadError = err;\n    }\n\n    if (!plugin.loadError) {\n\n      // add it to our dict for easy lookup later\n      plugins[plugin.name()] = plugin;\n\n      log.info(\"Loaded plugin: \" + plugin.name());\n\n      // call the plugin's initializer and pass it our API instance\n      plugin.initializer(this._api);\n\n      log.info(\"---\");\n      foundOnePlugin = true;\n    }\n\n  }.bind(this));\n\n  // Complain if you don't have any plugins.\n  if (!foundOnePlugin) {\n    log.warn(\"No plugins found. See the README for information on installing plugins.\")\n  }\n\n  return plugins;\n}\n\nServer.prototype._loadConfig = function() {\n\n  // Look for the configuration file\n  var configPath = User.configPath();\n\n  // Complain and exit if it doesn't exist yet\n  if (!fs.existsSync(configPath)) {\n    log.warn(\"config.json (%s) not found.\", configPath);\n\n    var config = {};\n\n    config.bridge = {\n      \"name\": \"Homebridge\",\n      \"username\": \"CC:22:3D:E3:CE:30\",\n      \"pin\": \"031-45-154\"\n    };\n\n    return config;\n      // log.error(\"Couldn't find a config.json file at '\"+configPath+\"'. Look at config-sample.json for examples of how to format your config.js and add your home accessories.\");\n      // process.exit(1);\n  }\n\n  // Load up the configuration file\n  var config;\n  try {\n    config = JSON.parse(fs.readFileSync(configPath));\n  }\n  catch (err) {\n    log.error(\"There was a problem reading your config.json file.\");\n    log.error(\"Please try pasting your config.json file here to validate it: http://jsonlint.com\");\n    log.error(\"\");\n    throw err;\n  }\n\n  var accessoryCount = (config.accessories && config.accessories.length) || 0;\n\n  var username = config.bridge.username;\n  var validMac = /^([0-9A-F]{2}:){5}([0-9A-F]{2})$/;\n  if (!validMac.test(username)){\n      throw new Error('Not a valid username: ' + username + '. Must be 6 pairs of colon-' +\n                      'separated hexadecimal chars (A-F 0-9), like a MAC address.');\n  }\n\n  var accessoryCount = (config.accessories && config.accessories.length) || 0;\n  var platformCount = (config.platforms && config.platforms.length) || 0;\n  log.info(\"Loaded config.json with %s accessories and %s platforms.\", accessoryCount, platformCount);\n\n  log.info(\"---\");\n\n  return config;\n}\n\nServer.prototype._loadCachedPlatformAccessories = function() {\n  var cachedAccessories = accessoryStorage.getItem(\"cachedAccessories\");\n  var platformAccessories = [];\n\n  if (cachedAccessories) {\n    for (var index in cachedAccessories) {\n      var serializedAccessory = cachedAccessories[index];\n      var platformAccessory = new PlatformAccessory(serializedAccessory.displayName, serializedAccessory.UUID, serializedAccessory.category);\n      platformAccessory._configFromData(serializedAccessory);\n\n      platformAccessories.push(platformAccessory);\n    }\n  }\n\n  return platformAccessories;\n}\n\nServer.prototype._createBridge = function() {\n  // pull out our custom Bridge settings from config.json, if any\n  var bridgeConfig = this._config.bridge || {};\n\n  // Create our Bridge which will host all loaded Accessories\n  return new Bridge(bridgeConfig.name || 'Homebridge', uuid.generate(\"HomeBridge\"));\n}\n\nServer.prototype._loadAccessories = function() {\n\n  // Instantiate all accessories in the config\n  log.info(\"Loading \" + this._config.accessories.length + \" accessories...\");\n\n  for (var i=0; i<this._config.accessories.length; i++) {\n\n    var accessoryConfig = this._config.accessories[i];\n\n    // Load up the class for this accessory\n    var accessoryType = accessoryConfig[\"accessory\"]; // like \"Lockitron\"\n    var accessoryConstructor = this._api.accessory(accessoryType); // like \"LockitronAccessory\", a JavaScript constructor\n\n    if (!accessoryConstructor)\n      throw new Error(\"Your config.json is requesting the accessory '\" + accessoryType + \"' which has not been published by any installed plugins.\");\n\n    // Create a custom logging function that prepends the device display name for debugging\n    var accessoryName = accessoryConfig[\"name\"];\n    var accessoryLogger = Logger.withPrefix(accessoryName);\n\n    accessoryLogger(\"Initializing %s accessory...\", accessoryType);\n\n    var accessoryInstance = new accessoryConstructor(accessoryLogger, accessoryConfig);\n    var accessory = this._createAccessory(accessoryInstance, accessoryName, accessoryType, accessoryConfig.uuid_base);  //pass accessoryType for UUID generation, and optional parameter uuid_base which can be used instead of displayName for UUID generation\n\n    // add it to the bridge\n    this._bridge.addBridgedAccessory(accessory);\n  }\n}\n\nServer.prototype._loadPlatforms = function() {\n\n    log.info(\"Loading \" + this._config.platforms.length + \" platforms...\");\n\n    for (var i=0; i<this._config.platforms.length; i++) {\n\n        var platformConfig = this._config.platforms[i];\n\n        // Load up the class for this accessory\n        var platformType = platformConfig[\"platform\"]; // like \"Wink\"\n        var platformName = platformConfig[\"name\"];\n        var platformConstructor = this._api.platform(platformType); // like \"WinkPlatform\", a JavaScript constructor\n\n        if (!platformConstructor)\n          throw new Error(\"Your config.json is requesting the platform '\" + platformType + \"' which has not been published by any installed plugins.\");\n\n        // Create a custom logging function that prepends the platform name for debugging\n        var platformLogger = Logger.withPrefix(platformName);\n\n        platformLogger(\"Initializing %s platform...\", platformType);\n\n        var platformInstance = new platformConstructor(platformLogger, platformConfig, this._api);\n\n        if (platformInstance.configureAccessory == undefined) {\n          // Plugin 1.0, load accessories\n          this._loadPlatformAccessories(platformInstance, platformLogger, platformType);\n        } else {\n          this._activeDynamicPlugins[platformType] = platformInstance;\n        }\n\n        if (platformInstance.configurationRequestHandler != undefined) {\n          this._configurablePlatformPlugins[platformType] = platformInstance;\n        }\n    }\n}\n\nServer.prototype._loadDynamicPlatforms = function() {\n  for (var dynamicPluginName in this._api._dynamicPlatforms) {\n    if (!this._activeDynamicPlugins[dynamicPluginName] && !this._activeDynamicPlugins[dynamicPluginName.split(\".\")[1]]) {\n      console.log(\"Load \" + dynamicPluginName);\n      var platformConstructor = this._api._dynamicPlatforms[dynamicPluginName];\n      var platformLogger = Logger.withPrefix(dynamicPluginName);\n      var platformInstance = new platformConstructor(platformLogger, null, this._api);\n      this._activeDynamicPlugins[dynamicPluginName] = platformInstance;\n\n      if (platformInstance.configurationRequestHandler != undefined) {\n          this._configurablePlatformPlugins[dynamicPluginName] = platformInstance;\n      }\n    }\n  }\n}\n\nServer.prototype._configCachedPlatformAccessories = function() {\n  for (var index in this._cachedPlatformAccessories) {\n    var accessory = this._cachedPlatformAccessories[index];\n\n    if (!(accessory instanceof PlatformAccessory)) {\n      console.log(\"Unexpected Accessory!\");\n      continue;\n    }\n\n    var fullName = accessory._associatedPlugin + \".\" + accessory._associatedPlatform;\n    var platformInstance = this._activeDynamicPlugins[fullName];\n\n    if (!platformInstance) {\n      platformInstance = this._activeDynamicPlugins[accessory._associatedPlatform];\n    }\n\n    if (platformInstance) {\n      platformInstance.configureAccessory(accessory);\n    } else {\n      console.log(\"Failed to find plugin to handle accessory \" + accessory.displayName);\n    }\n\n    accessory._prepareAssociatedHAPAccessory();\n    this._bridge.addBridgedAccessory(accessory._associatedHAPAccessory);\n  }\n}\n\nServer.prototype._loadPlatformAccessories = function(platformInstance, log, platformType) {\n  this._asyncCalls++;\n  platformInstance.accessories(once(function(foundAccessories){\n      this._asyncCalls--;\n\n      // loop through accessories adding them to the list and registering them\n      for (var i = 0; i < foundAccessories.length; i++) {\n          var accessoryInstance = foundAccessories[i];\n          var accessoryName = accessoryInstance.name; // assume this property was set\n\n          log(\"Initializing platform accessory '%s'...\", accessoryName);\n\n          var accessory = this._createAccessory(accessoryInstance, accessoryName, platformType, accessoryInstance.uuid_base);\n\n          // add it to the bridge\n          this._bridge.addBridgedAccessory(accessory);\n      }\n\n      // were we the last callback?\n      if (this._asyncCalls === 0 && !this._asyncWait)\n        this._publish();\n  }.bind(this)));\n}\n\nServer.prototype._createAccessory = function(accessoryInstance, displayName, accessoryType, uuid_base) {\n\n  var services = accessoryInstance.getServices();\n\n  if (!(services[0] instanceof Service)) {\n    // The returned \"services\" for this accessory is assumed to be the old style: a big array\n    // of JSON-style objects that will need to be parsed by HAP-NodeJS's AccessoryLoader.\n\n    // Create the actual HAP-NodeJS \"Accessory\" instance\n    return AccessoryLoader.parseAccessoryJSON({\n      displayName: displayName,\n      services: services\n    });\n  }\n  else {\n    // The returned \"services\" for this accessory are simply an array of new-API-style\n    // Service instances which we can add to a created HAP-NodeJS Accessory directly.\n\n    var accessoryUUID = uuid.generate(accessoryType + \":\" + (uuid_base || displayName));\n\n    var accessory = new Accessory(displayName, accessoryUUID);\n\n    // listen for the identify event if the accessory instance has defined an identify() method\n    if (accessoryInstance.identify)\n      accessory.on('identify', function(paired, callback) { accessoryInstance.identify(callback); });\n\n    services.forEach(function(service) {\n\n      // if you returned an AccessoryInformation service, merge its values with ours\n      if (service instanceof Service.AccessoryInformation) {\n        var existingService = accessory.getService(Service.AccessoryInformation);\n\n        // pull out any values you may have defined\n        var manufacturer = service.getCharacteristic(Characteristic.Manufacturer).value;\n        var model = service.getCharacteristic(Characteristic.Model).value;\n        var serialNumber = service.getCharacteristic(Characteristic.SerialNumber).value;\n\n        if (manufacturer) existingService.setCharacteristic(Characteristic.Manufacturer, manufacturer);\n        if (model) existingService.setCharacteristic(Characteristic.Model, model);\n        if (serialNumber) existingService.setCharacteristic(Characteristic.SerialNumber, serialNumber);\n      }\n      else {\n        accessory.addService(service);\n      }\n    });\n\n    return accessory;\n  }\n}\n\nServer.prototype._handleRegisterPlatformAccessories = function(accessories) {\n  var hapAccessories = [];\n  for (var index in accessories) {\n    var accessory = accessories[index];\n\n    accessory._prepareAssociatedHAPAccessory();\n    hapAccessories.push(accessory._associatedHAPAccessory);\n\n    this._cachedPlatformAccessories.push(accessory);\n  }\n\n  this._bridge.addBridgedAccessories(hapAccessories);\n  this._updateCachedAccessories();\n}\n\nServer.prototype._handleUpdatePlatformAccessories = function(accessories) {\n  // Update persisted accessories\n  this._updateCachedAccessories();\n}\n\nServer.prototype._handleUnregisterPlatformAccessories = function(accessories) {\n  var hapAccessories = [];\n  for (var index in accessories) {\n    var accessory = accessories[index];\n\n    if (accessory._associatedHAPAccessory) {\n      hapAccessories.push(accessory._associatedHAPAccessory);\n    }\n\n    for (var targetIndex in this._cachedPlatformAccessories) {\n      var existing = this._cachedPlatformAccessories[targetIndex];\n      if (existing.UUID === accessory.UUID) {\n        this._cachedPlatformAccessories.splice(targetIndex, 1);\n        break;\n      }\n    }\n  }\n\n  this._bridge.removeBridgedAccessories(hapAccessories);\n  this._updateCachedAccessories();\n}\n\nServer.prototype._handlePublishCameraAccessories = function(accessories) {\n  var accessoryPin = (this._config.bridge || {}).pin || \"031-45-154\";\n\n  for (var index in accessories) {\n    var accessory = accessories[index];\n\n    accessory._prepareAssociatedHAPAccessory();\n    var hapAccessory = accessory._associatedHAPAccessory;\n    var advertiseAddress = mac.generate(accessory.UUID);\n\n    if (this._publishedCameras[advertiseAddress]) {\n      throw new Error(\"Camera accessory \" + accessory.displayName + \" experienced an address collision.\");\n    } else {\n      this._publishedCameras[advertiseAddress] = accessory;\n    }\n\n    hapAccessory.on('listening', function(port) {\n      log.info(\"%s is running on port %s.\", accessory.displayName, port);\n    });\n\n    hapAccessory.publish({\n      username: advertiseAddress,\n      pincode: accessoryPin,\n      category: accessory.category\n    }, this._allowInsecureAccess);\n  }\n}\n\nServer.prototype._updateCachedAccessories = function() {\n  var serializedAccessories = [];\n\n  for (var index in this._cachedPlatformAccessories) {\n    var accessory = this._cachedPlatformAccessories[index];\n    serializedAccessories.push(accessory._dictionaryPresentation());\n  }\n\n  accessoryStorage.setItemSync(\"cachedAccessories\", serializedAccessories);\n}\n\nServer.prototype._handleNewConfig = function(type, name, replace, config) {\n  if (type === \"accessory\") {\n    // TODO: Load new accessory\n    if (!this._config.accessories) {\n      this._config.accessories = [];\n    }\n\n    if (!replace) {\n      this._config.accessories.push(config);\n    } else {\n      var targetName;\n      if (name.indexOf('.') !== -1) {\n        targetName = name.split(\".\")[1];\n      }\n      var found = false;\n      for (var index in this._config.accessories) {\n        var accessoryConfig = this._config.accessories[index];\n        if (accessoryConfig.accessory === name) {\n          this._config.accessories[index] = config;\n          found = true;\n          break;\n        }\n\n        if (targetName && (accessoryConfig.accessory === targetName)) {\n          this._config.accessories[index] = config;\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        this._config.accessories.push(config);\n      }\n    }\n  } else if (type === \"platform\") {\n    if (!this._config.platforms) {\n      this._config.platforms = [];\n    }\n\n    if (!replace) {\n      this._config.platforms.push(config);\n    } else {\n      var targetName;\n      if (name.indexOf('.') !== -1) {\n        targetName = name.split(\".\")[1];\n      }\n\n      var found = false;\n      for (var index in this._config.platforms) {\n        var platformConfig = this._config.platforms[index];\n        if (platformConfig.platform === name) {\n          this._config.platforms[index] = config;\n          found = true;\n          break;\n        }\n\n        if (targetName && (platformConfig.platform === targetName)) {\n          this._config.platforms[index] = config;\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        this._config.platforms.push(config);\n      }\n    }\n  }\n\n  var serializedConfig = JSON.stringify(this._config, null, '  ');\n  var configPath = User.configPath();\n  fs.writeFileSync(configPath, serializedConfig, 'utf8');\n}\n\n// Returns the setup code in a scannable format.\nServer.prototype._printPin = function(pin) {\n  console.log(\"Scan this code with your HomeKit App on your iOS device to pair with Homebridge:\");\n  console.log(chalk.black.bgWhite(\"                       \"));\n  console.log(chalk.black.bgWhite(\"    ┌────────────┐     \"));\n  console.log(chalk.black.bgWhite(\"    │ \" + pin + \" │     \"));\n  console.log(chalk.black.bgWhite(\"    └────────────┘     \"));\n  console.log(chalk.black.bgWhite(\"                       \"));\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/devPlugins/homebridge-suncalc/index.js":"'use strict';\n\nconst suncalc = require('suncalc');\nvar inherits = require('util').inherits;\n\nmodule.exports = homebridge => {\n  const Characteristic = homebridge.hap.Characteristic;\n  const Service = homebridge.hap.Service;\n  const Accessory = homebridge.hap.Accessory;\n  const uuid = homebridge.hap.uuid;\n  \n  const PeriodValue = function() {\n    Characteristic.call(this, 'Suncalc Period Value', '4d640a06-34fe-45d7-bf7c-736bb2cf5693');\n    this.setProps({\n      format: Characteristic.Formats.UINT8,\n      maxValue: 5,\n      minValue: 0,\n      minStep: 1,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n    });\n    this.value = this.getDefaultValue();\n  };\n  inherits(PeriodValue, Characteristic);\n  \n  const PeriodName = function() {\n    Characteristic.call(this, 'Suncalc Period Name', '4d640a06-34fe-45d7-bf7c-736bb2cf5694');\n    this.setProps({\n      format: Characteristic.Formats.STRING,\n      perms: [Characteristic.Perms.READ]\n    });\n    this.value = this.getDefaultValue();\n  };\n  inherits(PeriodName, Characteristic);\n  \n  const Suncalc = function(displayName, subtype) {\n\t  Service.call(this, displayName, '61f96c67-1b62-4c2b-a300-58c242355017', subtype);\n\n\t  // Required Characteristics\n\t  this.addCharacteristic(PeriodValue);\n\t  this.addCharacteristic(PeriodName);\n\n\t  // Optional Characteristics\n\t  this.addOptionalCharacteristic(Characteristic.StatusActive);\n\t  this.addOptionalCharacteristic(Characteristic.StatusFault);\n\t  this.addOptionalCharacteristic(Characteristic.StatusTampered);\n\t  this.addOptionalCharacteristic(Characteristic.StatusLowBattery);\n\t  this.addOptionalCharacteristic(Characteristic.Name);\n\t};\n\tinherits(Suncalc, Service);\n\n  class SuncalcAccessory {\n    constructor(log, config) {\n      if (!config.location ||\n          !Number.isFinite(config.location.lat) ||\n          !Number.isFinite(config.location.lng)) {\n        throw new Error('Invalid or missing `location` configuration.');\n      }\n\t  \n\t  this.sunriseEndOffset = 0\n\t  this.sunsetStartOffset = 0\n\t  \n      if (!config.offset || !config.offset.sunriseEnd) {\n      \tthis.sunriseEndOffset = 0\n      } else {\n      \tthis.sunriseEndOffset = config.offset.sunriseEnd\n      }\n\t  \n      if (!config.offset || !config.offset.sunsetStart) {\n      \tthis.sunsetStartOffset = 0\n      } else {\n      \tthis.sunsetStartOffset = config.offset.sunsetStart\n      }\n\n      this.location = config.location;\n      // this.service = new Service.LightSensor(config.name);\n\t  this.service = new Suncalc(config.name);\n  \t  this.log = log;\n      this.updateAmbientLightLevel();\n    }\n\n    updateAmbientLightLevel() {\n      const nowDate = new Date();\n      const now = nowDate.getTime();\n\n      const sunDates = suncalc.getTimes(\n        nowDate,\n        this.location.lat,\n        this.location.lng\n      );\n      const times = {\n  \t  \tnightEnd: sunDates.nightEnd.getTime(),\n\t\tnauticalDawn: sunDates.nauticalDawn.getTime(),\n  \t  \tdawn: sunDates.dawn.getTime(),\n\t\tsunrise: sunDates.sunrise.getTime(),\n        sunriseEnd: sunDates.sunriseEnd.getTime() + (this.sunriseEndOffset * 1000 * 60),\n        sunsetStart: sunDates.sunsetStart.getTime() + (this.sunsetStartOffset * 1000 * 60),\n        sunset: sunDates.sunset.getTime(),\n  \t  \tdusk: sunDates.dusk.getTime(),\n\t  \tnauticalDusk: sunDates.nauticalDusk.getTime(),\n  \t\tnight: sunDates.night.getTime()\n      };\n\n      let lightRatio;\n\t  let sunCalc;\n      let nextUpdate;\n\t  let periodName;\n\t  \n\t  if (now < times.dawn) {\n\t\t  // Nightime\n\t  \tthis.log(\"Currently Nighttime(0). Morning Twilight begins at \" + sunDates.dawn.toLocaleTimeString())\n    \tnextUpdate = times.dawn\n\t\tsunCalc = 0\n\t\tperiodName = \"Night\"\n\t  } else if (now >= times.dawn && now < times.sunrise) {\n\t\t  // Morning Twilight\n\t  \tthis.log(\"Currently Morning Twilight(1). Sunrise is at \" + sunDates.sunrise.toLocaleTimeString())\n  \t\tif (this.sunriseEndOffset != 0) {\n  \t\t\tthis.log(\"Sunrise time will be offset by \" + this.sunriseEndOffset + \" minute(s)\")\n  \t\t}\n\t\tnextUpdate = times.sunrise\n\t\tsunCalc = 1\n\t\tperiodName = \"Morning Twilight\"\n\t  } else if (now >= times.sunrise && now < times.sunriseEnd) {\n\t\t  // Sunrise\n\t  \tthis.log(\"Currently Sunrise(2). Sunrise ends at \" + sunDates.sunriseEnd.toLocaleTimeString())\n    \tnextUpdate = times.sunriseEnd\n\t\tsunCalc = 2\n    \tperiodName = \"Sunrise\"\n\t  } else if (now >= times.sunriseEnd && now < times.sunsetStart) {\n\t\t  // Daytime\n\t  \tthis.log(\"Currently Daytime(3). Sunset is at \" + sunDates.sunsetStart.toLocaleTimeString())\n\t\tif (this.sunsetStartOffset != 0) {\n\t\t\tthis.log(\"Sunset time will be offset by \" + this.sunsetStartOffset + \" minute(s)\")\n\t\t}\n    \tnextUpdate = times.sunsetStart\n\t\tsunCalc = 3\t\t \n\t\tperiodName = \"Daytime\"\n\t  } else if (now >= times.sunsetStart && now < times.sunset) {\n\t\t  // Sunset\n\t  \tthis.log(\"Currently Sunset(4). Evening Twilight begins at \" + sunDates.sunset.toLocaleTimeString())\n\t\tnextUpdate = times.sunset\n\t\tsunCalc = 4\n    \tperiodName = \"Sunset\"\n\t  } else if (now >= times.sunset && now < times.dusk){\n\t\t  // Evening Twilight\n\t  \tthis.log(\"Currently Evening Twilight(5). Night begins at \" + sunDates.dusk.toLocaleTimeString())\n\t\tnextUpdate = times.dusk\n\t\tsunCalc = 5\n\t\tperiodName = \"Evening Twilight\"  \n\t  } else {\n \t  \t // Nighttime\n\t\tsunCalc = 0\t\t  \n\t\tvar tomorrow = new Date()\n\t\ttomorrow.setDate(tomorrow.getDate() + 1)\n\t\tconst tomorrowsTimes = suncalc.getTimes(tomorrow,this.location.lat,this.location.lng)\n  \t  \tthis.log(\"Currently Nighttime(0). Morning Twilight begins at \" + tomorrowsTimes.dawn.toLocaleTimeString())\n  \t\tnextUpdate = tomorrowsTimes.dawn.getTime()\n\t\tperiodName = \"Night\"\n\t  }\n\t  \n      this.service.setCharacteristic(\n        PeriodValue,\n        sunCalc\n      );\n\t  \n      this.service.setCharacteristic(\n        PeriodName,\n        periodName\n      );\n\t  \n      setTimeout(this.updateAmbientLightLevel.bind(this), nextUpdate - now);\n    }\n\n    getServices() {\n      return [this.service];\n    }\n  }\n\n  homebridge.registerAccessory('homebridge-suncalc', 'Suncalc', SuncalcAccessory);\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge/node_modules/homebridge/lib/util/mac.js":"var crypto = require('crypto');\n\n'use strict';\n\nmodule.exports = {\n  generate: generate\n}\n\nfunction generate(data) {\n  var sha1sum = crypto.createHash('sha1');\n  sha1sum.update(data);\n  var s = sha1sum.digest('hex');\n  var i = -1;\n  return 'xx:xx:xx:xx:xx:xx'.replace(/[x]/g, function(c) {\n    i += 1;\n    return s[i];\n  }).toUpperCase();\n};"}